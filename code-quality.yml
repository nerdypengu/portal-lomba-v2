trigger: none

pool:
  name: Host

steps:
# Checkout code dari repository GitHub
- task: Checkout@1
  inputs:
    repository: 'self'
    clean: true

# Setup Node.js
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '18.x'

# Install dependencies
- script: |
    npm install -g yarn
    yarn --version
  displayName: Install Yarn

- script: |
    echo Installing all dependencies with Yarn...
    yarn install
  displayName: Install Dependencies

- task: PowerShell@2
  displayName: 'Ensure Cache Directory Exists'
  inputs:
    targetType: 'inline'
    script: |
      if (-not (Test-Path "$(Pipeline.Workspace)\.npm")) {
          New-Item -ItemType Directory -Path "$(Pipeline.Workspace)\.npm"
      }

# Cache Yarn dependencies
- task: CacheBeta@2
  inputs:
    key: 'yarn | "$(Agent.OS)" | $(Build.SourcesDirectory)/yarn.lock'
    path: ~/.cache/yarn
    cacheHitVar: YarnCacheRestored
  displayName: 'Cache Yarn Dependencies'

# Dependency check dengan OWASP
#- task: dependency-check-build-task@6
#  inputs:
#    format: 'HTML'
#    uploadReports: true
#    reportDirectory: '$(Build.ArtifactStagingDirectory)/dependency-check'
#    reportFilename: 'dependency-check-report.html'
#    scanPath: '$(Build.SourcesDirectory)/src'  # Lokasi untuk pemindaian dependensi
#    cvssFailureThreshold: '7.0'
#    uploadSARIFReports: true
#    projectName: ''

# Linting dengan fix
- script: |
    yarn eslint . --fix --format json -o eslint-report.json
  displayName: 'Run ESLint with Fix and Report'

# Publish report
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'eslint-report.json'
    ArtifactName: 'ESLint Report'
  displayName: 'Publish ESLint Report'